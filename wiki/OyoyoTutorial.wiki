#summary Oyoyo Tutorial

= Introduction =

This tutorial will show you how to use the Oyoyo IRC module.

== Connecting to a server ==
To connect to a single server you need to use oyoyo.client.IRCClient. The
IRCClient class handles all communication with a *single* server.

When creating an IRCClient you also need to provide a class to handle
messages sent from the server, this is called the "command handler" and must
be a subclass of oyoyo.cmdhandler.CommandHandler.

The following is an example of creating an IRCClient and a command handler:

{{{
from oyoyo.client import IRCClient
from oyoyo.cmdhandler import CommandHandler

class MyHandler(CommandHandler):
    # handle PRIVMSG commands ( note lower case )
    def privmsg(self, prefix, args):
        print "%s in %s said: %s" % (args[0], prefix, args[1])

cli = IRCClient(MyHandler,
     host="irc.freenode.net",
     port=6667,
     nick="myname",
     )
}}}

This code shows a simple handler to print messages sent either to the bot or to
room the bot is in using PRIVMSG. ( You may need to consult
the IRC specification for all possible commands ). 

It's very likely that you will want to issue some commands "on connect", for example
joining rooms, sending identify messages etc... This is acheived with an on connect
callback.

The following example builds on the previous example and adds an on connect
callback to automatically identify and join the room '#test'. Notice the use of
oyoyo.helpers which contains commonly used IRC commands.

{{{
from oyoyo import helpers
....

def connect_callback(cli):
    # ns short for NickServ
    helpers.ns(cli, "IDENTIFY", "my_password")
    # could also be done as
    #helpers.msg(cli, "NickServ", "IDENTIFY", "my_password")

    # join '#test'
    helpers.join(cli, "#test")

cli = IRCClient(MyHandler,
     host="irc.freenode.net",
     port=6667,
     nick="myname",
     connect_cb=connect_callback,
)
}}}

All the previous code will not actually do anything, we still need to connect
( and stay connected )... 

{{{
connection = cli.connect()
while 1:
    connection.next()
}}}

Whats actually happening is connect calls yield, halting execution at a specific
point in the loop, waiting to be called again. This means you can easily create
more than one instance of IRCClient and call them all in a loop. For example:

{{{
cli_1 = IRCClient(SomeHandler, ...)
cli_2 = IRCClient(SomeHandler, ...)

con_1 = cli_1.connect()
con_2 = cli_2.connect()

while 1:
    con_1.next()
    con_2.next()
}}}

Luckily we dont have to deal with multiple connections like this.
oyoyo.client.IRCApp is designed to maintain several IRCClient connections but at the
cost of blocking. It is usefull in certain situations and also serves as an example
implementation of an application.

Using IRCApp we can write the last example as:

{{{
app = IRCApp()
app.addClient( IRCClient(SomeHandler, ...) )
app.addClient( IRCClient(SomeHandler, ...) )
app.run()
}}}
